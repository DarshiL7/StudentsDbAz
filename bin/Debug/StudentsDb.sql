/*
Deployment script for StudentsDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "StudentsDb"
:setvar DefaultFilePrefix "StudentsDb"
:setvar DefaultDataPath "C:\Users\Darshil\AppData\Local\Microsoft\VisualStudio\SSDT\StudentsDb"
:setvar DefaultLogPath "C:\Users\Darshil\AppData\Local\Microsoft\VisualStudio\SSDT\StudentsDb"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[OldValues]...';


GO
CREATE TABLE [dbo].[OldValues] (
    [OldId]   INT          NOT NULL,
    [OldName] VARCHAR (50) NOT NULL
);


GO
PRINT N'Creating [dbo].[StudentInfo]...';


GO
CREATE TABLE [dbo].[StudentInfo] (
    [StudentId] INT          NOT NULL,
    [name]      VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_StudentInfo] PRIMARY KEY CLUSTERED ([StudentId] ASC)
);


GO
PRINT N'Creating [dbo].[Subjects]...';


GO
CREATE TABLE [dbo].[Subjects] (
    [SubId]     INT          NOT NULL,
    [SubName]   VARCHAR (50) NOT NULL,
    [StudentId] INT          NOT NULL
);


GO
PRINT N'Creating [dbo].[FK_Subjects_StudentInfo]...';


GO
ALTER TABLE [dbo].[Subjects] WITH NOCHECK
    ADD CONSTRAINT [FK_Subjects_StudentInfo] FOREIGN KEY ([StudentId]) REFERENCES [dbo].[StudentInfo] ([StudentId]);


GO
PRINT N'Creating [dbo].[tr_insert]...';


GO
CREATE trigger [dbo].[tr_insert]
on [dbo].[StudentInfo]
after insert as 
begin
	set nocount on;
	
	select i.StudentId,i.name from inserted as i;
end;
GO
PRINT N'Creating [dbo].[tr_delete]...';


GO
create trigger tr_delete
on dbo.StudentInfo
after delete as
begin
	declare @StudentId int;
	declare @name varchar(50);
	set nocount on;
	update p set p.name=@name
	from StudentInfo as p
	where exists(select * from deleted as d where p.StudentId=d.StudentId);
end;
GO
PRINT N'Creating [dbo].[tr_delete_insertTempDb]...';


GO
CREATE trigger tr_delete_insertTempDb
on dbo.StudentInfo
after delete as
begin
	declare @StudentId int;
	declare @name varchar(50);
	set nocount on;
	select * from inserted;
	select @StudentId=StudentId,@name=name from deleted;
	insert into OldValues values(@StudentId,@name) 
	
end;
GO
PRINT N'Creating [dbo].[vDetails]...';


GO
CREATE view vDetails as
SELECT dbo.StudentInfo.name, dbo.Subjects.SubName, dbo.StudentInfo.StudentId
FROM StudentInfo ,Subjects where dbo.StudentInfo.StudentId=Subjects.StudentId
GO
PRINT N'Creating [dbo].[tr_updateviews]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE trigger tr_updateviews 
   ON  vDetails 
   instead of update as
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @name varchar(50);
	declare @SubName varchar(50);
	declare @StudentId int;
	declare @SubId int;
	select @SubName=SubName from inserted
	select @StudentId=StudentId from inserted
	select @name=name from inserted
	--UPDATE StudentInfo set name=@name where StudentId=@StudentId;
	--UPDATE Subjects set SubName=@SubName where StudentId=@StudentId;
	Update vDetails set name=@name where StudentId=@StudentId
	Update vDetails set SubName=@SubName where StudentId=@StudentId
    -- Insert statements for trigger here

END
GO
PRINT N'Creating [dbo].[vDetails].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "StudentInfo"
            Begin Extent = 
               Top = 7
               Left = 48
               Bottom = 126
               Right = 242
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Subjects"
            Begin Extent = 
               Top = 7
               Left = 290
               Bottom = 126
               Right = 484
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vDetails';


GO
PRINT N'Creating [dbo].[vDetails].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'vDetails';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Subjects] WITH CHECK CHECK CONSTRAINT [FK_Subjects_StudentInfo];


GO
PRINT N'Update complete.';


GO
